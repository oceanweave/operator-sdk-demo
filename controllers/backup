package controllers

import (
	"context"
	"github.com/go-logr/logr"
	appsv1 "k8s.io/api/apps/v1"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/util/json"
	"k8s.io/client-go/util/retry"
	"reflect"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/log"

	appv1beta1 "github.com/oceanweave/operator-sdk-demo/api/v1beta1"
)

var (
	oldSpecAnnotation = "old/spec"
)

// MyAppReconciler reconciles a MyApp object
type MyAppReconciler struct {
	client.Client
	Scheme *runtime.Scheme
	Log    logr.Logger
}

//+kubebuilder:rbac:groups=app.oceanweave.io,resources=myapps,verbs=get;list;watch;create;update;patch;delete
//+kubebuilder:rbac:groups=app.oceanweave.io,resources=myapps/status,verbs=get;update;patch
//+kubebuilder:rbac:groups=app.oceanweave.io,resources=myapps/finalizers,verbs=update

// Reconcile is part of the main kubernetes reconciliation loop which aims to
// move the current state of the cluster closer to the desired state.
// TODO(user): Modify the Reconcile function to compare the state specified by
// the MyApp object against the actual cluster state, and then
// perform operations to make the cluster state reflect the state specified by
// the user.
//
// For more details, check Reconcile and its Result here:
// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.11.0/pkg/reconcile
func (r *MyAppReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	_ = log.FromContext(ctx)
	log2 := r.Log.WithValues("myapp", req.NamespacedName)
	// TODO(user): your logic here
	// 首先获取 MyApp 实例
	var myapp appv1beta1.MyApp
	err := r.Client.Get(ctx, req.NamespacedName, &myapp)
	if err != nil {
		if client.IgnoreNotFound(err) != nil { // 若不是 Not Found
			return ctrl.Result{}, err
		}
		// 再删除一个不存在的对象时，可能会包 not found 错误
		// 这种情况不需要重新入队列排队修复
		return ctrl.Result{}, nil
	}
	// 当前对象标记为是删除了
	if myapp.DeletionTimestamp != nil {
		return ctrl.Result{}, nil
	}
	// 如果不存在关联的资源，是不是应该取创建
	deploy := &appsv1.Deployment{}
	if err := r.Client.Get(ctx, req.NamespacedName, deploy); err != nil && errors.IsNotFound(err) {
		// 关联 Annotation 存储资源信息  用于以后更新检查
		data, err := json.Marshal(myapp.Spec)
		if err != nil {
			return ctrl.Result{}, err
		}
		if myapp.Annotations != nil {
			myapp.Annotations[oldSpecAnnotation] = string(data)
		} else {
			myapp.Annotations = map[string]string{
				oldSpecAnnotation: string(data),
			}
		}
		// 重新更新资源 MyApp
		if err := retry.RetryOnConflict(retry.DefaultRetry, func() error {
			return r.Client.Update(ctx, &myapp)
		}); err != nil {
			return ctrl.Result{}, err
		}

		// Deployment 不存在，创建关联的资源
		newDeploy := NewDeploy(&myapp)
		if err := r.Client.Create(ctx, newDeploy); err != nil {
			return ctrl.Result{}, err
		}
		// 直接创建 Service
		newService := NewService(&myapp)
		if err := r.Client.Create(ctx, newService); err != nil {
			return ctrl.Result{}, err
		}
		// 创建成功
		return ctrl.Result{}, nil
	}

	// 若果存在关联的资源，是不是要判断是否需要更新
	// 更新，是不是应该判断是否需要更新（YAML文件是否发生了变化）
	// old yaml 可以从 annotation 中获取
	oldSpec := appv1beta1.MyAppSpec{}
	if err := json.Unmarshal([]byte(myapp.Annotations[oldSpecAnnotation]), &oldSpec); err != nil {
		return ctrl.Result{}, err
	}

	// 新旧对象比较，不一致就更新
	if !reflect.DeepEqual(myapp.Spec, oldSpec) {
		// 更新资源
		newDeploy := NewDeploy(&myapp)
		oldDeploy := &appsv1.Deployment{}
		// 查看旧的 deploy 是否存在
		if err := r.Client.Get(ctx, req.NamespacedName, oldDeploy); err != nil {
			return ctrl.Result{}, err
		}
		// 正常就应该直接去更新 oldDeploy
		// 此处没有直接用 newDeploy 去更新
		oldDeploy.Spec = newDeploy.Spec
		// 注意，一般不会直接调用 Update 进行更新
		if err := retry.RetryOnConflict(retry.DefaultRetry, func() error {
			if err := r.Client.Update(ctx, oldDeploy); err != nil {
				return err
			}
			return nil
		}); err != nil {
			return ctrl.Result{}, err
		}
		// 更新 Service
		newService := NewService(&myapp)
		oldService := &corev1.Service{}
		if err := r.Client.Get(ctx, req.NamespacedName, oldService); err != nil {
			return ctrl.Result{}, err
		}
		// 需要制定 cluser ip 为之前的 否则更新可能出错
		newService.Spec.ClusterIP = oldService.Spec.ClusterIP
		oldService.Spec = newService.Spec
		if err := retry.RetryOnConflict(retry.DefaultRetry, func() error {
			if err := r.Client.Update(ctx, oldService); err != nil {
				return err
			}
			return nil
		}); err != nil {
			return ctrl.Result{}, err
		}
		// ------- 更新 annotation  记录当前的 MyApp Spec --------
		// 此处只是更新结构体  还未更新到 apiserver
		data, err := json.Marshal(myapp.Spec)
		log2.Info("注释信息为", "annotation", string(data))
		if err != nil {
			return ctrl.Result{}, err
		}
		if myapp.Annotations != nil {
			myapp.Annotations[oldSpecAnnotation] = string(data)
		} else {
			myapp.Annotations = map[string]string{
				oldSpecAnnotation: string(data),
			}
		}
		// 重新更新资源 MyApp   此处才更新到 apiserver
		if err := retry.RetryOnConflict(retry.DefaultRetry, func() error {
			return r.Client.Update(ctx, &myapp)
		}); err != nil {
			return ctrl.Result{}, err
		}
	}

	// 上面的劣势：当 deployment 或 service 被误删时，MyApp 并不会重新创建
	// 调谐，获取当前的状态，与期望状态进行比较
	var deploy appsv1.Deployment
	deploy.Name = myapp.Name
	deploy.Namespace = myapp.Namespace
	ctrl.CreateOrUpdate(ctx, r, &deploy, func() error {
		// 调谐

	})

	return ctrl.Result{}, nil
}

// SetupWithManager sets up the controller with the Manager.
func (r *MyAppReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&appv1beta1.MyApp{}).
		Complete(r)
}
